<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <body>
        <ol class="listnumber">
            <li class="listnumber">On the Actions, click <span class="uielement" style="font-weight: bold;">Reverse Engineer</span>. 
<p class="listcontinue">The New Model dialog box opens.</p></li>
            <li class="listnumber">Select the new model type, template, and target database. Then, click <span class="uielement" style="font-weight: bold;">Next</span>.
<p class="listcontinue">The Reverse Engineering Wizard opens.</p></li>
            <li class="listnumber">On the Overview tab, and work on the following options:<dl><dt><span class="uielement">Reverse Engineer From</span></dt><dd><p class="normaltermcontinued2">Specifies whether you want to reverse engineer from a database, keyspace, bucket, or a script. If you click script, click <span class="uielement" style="font-weight: bold;">Browse</span> to select the file.</p><p class="noteAlt">To reverse engineer from a script, select a file that is saved either in ANSI or ASCII format. </p></dd></dl></li>
            <li class="listnumber">On the <b>Connection</b> tab, based on your database, configure appropriate database connection parameters.<br />For more information, refer to the <a href="../../User Guides/erwin Help/Database_Connection_Parameters.html">Database Connection Parameters</a> topic.<br /></li>
            <li class="listnumber">Based on your target database, on the Schemas, Keypaces, Database, or Buckets tab, select the databases to reverse engineer. To reverse engineer system tables, views, and stored procedures related to system tables, select the <b>System Objects</b> check box.<br /></li>
            <p class="normaltermcontinued2">Use the following target database-specific options:</p>
            <p class="bodytext"><b>MongoDB</b>:</p>
            <ul>
                <li>
                    <p class="bodytext"><b>Document Count/Document (%)</b>: Use this option to specify the number of documents or percentage of total records that the newly generated model schema would contain.</p>
                </li>
                <li>
                    <p class="bodytext"><b>Deep Search</b>: Use this option to specify whether the deep search algorithm is used to retrieve the right samples for schema generation.</p>
                </li>
                <li>
                    <p class="bodytext"><b>Sampling</b>: Use the Sequence or Random sampling methods to sample records in the selected collections. Sampling enables you to retrieve right estimates for accurate collection schema generation.</p>
                </li>
            </ul>
            <p class="bodytext"><b>Couchbase</b>:</p>
            <ul>
                <li>
                    <p class="bodytext"><b>Sample Size</b>: </p>
                </li>
            </ul>
            <li class="listnumber">Based on your target database, on the Tables, Collections, or Documents tab, select the tables to reverse engineer.</li>
            <li class="listnumber">On the Option Set tab, select a default or custom option set.</li>
            <li class="listnumber">On the Detailed Options tab, work on the following options:<br /><dl><dt>NSM Options</dt><dd><p class="normaltermcontinued2">Select the naming standard glossary file (.CSV) that you want to apply to your model.</p></dd></dl><p class="normaltermcontinued"><span class="uielement" style="font-weight: bold;">Reverse Engineer </span></p><dd><p class="normaltermcontinued2">Specifies whether you want to reverse engineer system objects and user tables, or only user tables. If you select the System Objects check box the system tables, views, and stored procedures related to system tables are reverse engineered.</p><p class="noteAlt">For Redshift, selecting the S3Bucket Objects check box reverse engineers objects from Amazon S3Bucket.</p></dd><dl><dt><span class="uielement">Table/Views Owned By</span></dt><dd><p class="normaltermcontinued2">Reverse engineers tables and views by ownership. You must have read and write privileges on all the tables that you want to reverse engineer, regardless of whether you are the owner of the table. Select <em class="italic">one</em> of the following ownership options:</p><dl><dt><span class="uielement">All</span></dt><dd><p class="normaltermcontinued3">Reverse engineers all tables and views in the database for which you have the necessary permissions, regardless of the owner.</p></dd><dt><span class="uielement">Current User</span></dt><dd><p class="normaltermcontinued3">Reverse engineers only those tables and views that are owned by the current user. The current user details are entered in the &lt;Database&gt; Connection dialog.</p></dd><dt><span class="uielement">Owners (comma separated)</span></dt><dd><p class="normaltermcontinued3">Reverse engineers the tables and views that are owned by the users that are specified here. Enter the user names in capital letters.<p class="noteAlt">For Snowflake, the 2020 R2 release does not support Owner and Table Filters in the Reverse Engineering Options set.</p></p></dd></dl></dd><dt><span class="uielement">Table Filter</span></dt><dd><p class="normaltermcontinued2">Specifies the tables that you want to set as filter criteria.</p><p class="normaltermcontinued2">To set the filter criteria, you must have table owner permissions. For exact matches, mention table names in upper case inside double quotes(for example, "TABLE1"). To use wild cards, mention table names without double quotes (for example, TABLE1).</p><p class="normaltermcontinued2">To specify multiple tables, use a comma-separated list.</p><p class="normaltermcontinued2">Click the <b>In</b> button to specify the table spaces to filter the tables from.</p></dd><dt><span class="uielement">Infer</span></dt><dd><p class="normaltermcontinued2">Specifies whether you want to infer primary keys or relationships, or both, during reverse engineering. Work with the following options:</p><dl><dt><span class="uielement">Primary Keys</span></dt><dd><p class="normaltermcontinued3">Infers primary key columns for the tables that are based on defined indexes.</p></dd><dt><span class="uielement">Relations</span></dt><dd><p class="normaltermcontinued3">Infers the relationships between tables that are based on either primary key column names or defined indexes. Select this option and then specify whether to use primary key column names or defined indexes:</p><p class="listcontinue3"><span class="uielement" style="font-weight: bold;">Indexes</span></p><p class="listcontinue3">Infers the relationships from the table indexes. Relationships are inferred from table indexes only if the primary key columns of the parent table are part of the index in the child table.</p><p class="listcontinue3"><span class="uielement" style="font-weight: bold;">Names</span></p><p class="listcontinue3">Infers the relationships from the primary key column names. Relationships are inferred from columns names only if all of the primary key columns of the parent are in the child table.</p><p class="noteAlt">If the target database or script supports primary and foreign key declarations, you do not need to use the Primary Keys, Relations, Indexes, or Names options.</p></dd></dl></dd><dt><span class="uielement">Case Conversion of Physical Names</span></dt><dd><p class="normaltermcontinued2">Specifies how the case conversion of physical names is handled during reverse engineering. Work with the following options: </p><dl><dt><span class="uielement">None</span></dt><dd><p class="normaltermcontinued3">Preserves the case exactly as it appears in the script file or database.</p></dd><dt><span class="uielement">lower</span></dt><dd><p class="normaltermcontinued3">Converts the names to lower case.</p></dd><dt><span class="uielement">UPPER</span></dt><dd><p class="normaltermcontinued3">Converts the names to upper case.</p></dd><dt><span class="uielement">Force</span></dt><dd><p class="normaltermcontinued3">Overrides the physical name property for all objects in logical/physical models automatically during reverse engineering.</p><p class="normaltermcontinued3">If this option is not enabled, all logical and physical names are set to the same value after the process completes. If this option is enabled, the logical/physical link is broken between the logical and physical name.</p></dd></dl></dd><dt><span class="uielement">Case Conversion of Logical Names</span></dt><dd><p class="normaltermcontinued2">Specifies how the case conversion of logical names is handled during reverse engineering. Work with the following options:</p><dl><dt><span class="uielement">None</span></dt><dd><p class="normaltermcontinued3">Preserves the case exactly as it appears in the script file or database.</p></dd><dt><span class="uielement">lower</span></dt><dd><p class="normaltermcontinued3">Converts the names to lower case.</p></dd><dt><span class="uielement">UPPER</span></dt><dd><p class="normaltermcontinued3">Converts the names to upper case.</p></dd><dt><span class="uielement">Mixed</span></dt><dd><p class="normaltermcontinued3">Preserves mixed-case logical names.</p></dd></dl></dd><dt><span class="uielement">Include Generated Triggers</span></dt><dd>Specifies whether erwin-generated triggers are loaded during the reverse engineer process. This option is linked to the <em class="italic">Automatically Create RI Triggers</em> setting in the Model Editor, RI Defaults tab. When you choose to create RI triggers automatically, the triggers are treated as model objects. These objects can be forward-engineered into a model, database, or script file. You can include or exclude automatically generated triggers when you reverse engineer. <![CDATA[ 
]]></dd></dl></li>
            <li class="listnumber">Click <span class="uielement" style="font-weight: bold;">OK</span>.<p class="listcontinue">The reverse engineering process starts. Once the process is complete, based on your selections, a schema is generated and a model is created.</p></li>
        </ol>
    </body>
</html>